name: "Build and Push"
on:
  pull_request:
    types:
      - opened
      # - synchronize
      - reopened
  push:
    branch:
      - main
  issue_comment:
    types:
      - created

jobs:
  fetch-build-option:
    name: "Fetch Build Option"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    outputs:
      build_option: ${{ steps.set-option.outputs.build_option }} # Outputs extracted build option
      option_found: ${{ steps.set-option.outputs.option_found }} # Outputs option found status
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Parse PR Description and Comments for Build Option
        id: parse-comments
        uses: actions/github-script@v6
        with:
          script: |
            // Check if this is a comment on a pull request
            const isPullRequest = context.payload.issue && context.payload.issue.pull_request;
            if (!isPullRequest) {
              console.log("This is not a pull request. Exiting gracefully.");
              core.setOutput("build_option", "none");
              core.setOutput("option_found", false);
              return;
            }

            const prNumber = context.payload.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            const optionRegex = /\/build-option (all|none|ecs|lambda)/i;

            let buildOption = "none"; // Default build option
            let optionFound = false; // Flag for whether an option is found

            // Check PR comments for the build option
            const comments = await github.rest.issues.listComments({
              owner: repoOwner,
              repo: repoName,
              issue_number: prNumber,
            });

            for (const comment of comments.data) {
              const match = comment.body.match(optionRegex);
              if (match) {
                optionFound = true;
                buildOption = match[1].toLowerCase();
                break;
              }
            }

            console.log(`Option Found: ${optionFound}`);
            console.log(`Build Option: ${buildOption}`);

            // Set outputs for later steps
            core.setOutput("build_option", buildOption);
            core.setOutput("option_found", optionFound);

  terraform:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    needs: fetch-build-option
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          echo "Selected Build Option: ${{ needs.fetch-build-option.outputs.build_option }}"
          terraform plan -no-color -input=false > plan_output.txt
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOutput = require('fs').readFileSync('plan_output.txt', 'utf8');
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false