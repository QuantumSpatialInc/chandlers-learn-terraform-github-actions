name: "Build and Push"
on:
  pull_request:
    types:
      - opened
      - reopened
      - closed
  # push:
  #   branches:
  #     - main

jobs:
  Retrieve-Build-Options:
    name: "Build Option Instructions"
    runs-on: ubuntu-latest
    # if: ${{ github.event_name == 'pull_request'}}
    permissions:
      pull-requests: write
    steps:
      - name: Post Instructions
        id: post-build-options
        uses: actions/github-script@v6
        with:
          script: |
            const output =  `
              ### To Build & Push Docker Containers: Set Build Group Label
              Please set one of the following labels on this PR to define the Docker build group:
              - **Docker-all**: Build all Docker images
              - **Docker-lambda**: Build only Lambda-related Docker images
              - **Docker-ECS**: Build only the ECS-related Docker images
              By default no docker containers will be built if none of these labels are attached.

              ### To set pdal_runner Repo branch: Set PDAL Repo branch Label
              Please set one of the following labels on this PR to define the Docker build group:
              - **PDAL-dev**: Build with PDAL from branch dev
              - **PDAL-[branch-name]**: Build with PDAL from branch [branch-name]
              By default the PDAL branch used is 'main'

              ### To Apply Terraform: Set Terraform Apply Label
              Please set one of the following labels on this PR to define the Docker build group:
              - **Terraform-apply**: Build all Docker images
              By default no terraform apply action will be taken if this label is not attached.
              


              You can apply the label in the right-hand sidebar of this PR.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: |
          echo "Selected Build Option: ${{ needs.fetch-build-option.outputs.build_option }}"
          terraform plan -no-color -input=false > plan_output.txt
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        # if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOutput = require('fs').readFileSync('plan_output.txt', 'utf8');
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Print PR Labels
        if: github.event.pull_request.merged == true
        env:
          LABELS_JSON: ${{ toJson(github.event.pull_request.labels) }}
        run: |
          echo "Extracting label names from PR..."
          echo "LABEL_NAMES: $LABELS_JSON"
          LABEL_NAMES=$(echo "$LABELS_JSON" | jq -r '.[].name' | tr '\n' ',')
          # Remove the trailing comma
          LABEL_NAMES=${LABEL_NAMES%,}
          # Initialize an empty array for Docker images
          DOCKER_IMAGES=()
          echo "Label Names:"
          echo "$LABEL_NAMES"
          echo "Determining which Docker images to build based on labels..."
          case "$LABEL_NAMES" in
            *Docker-all*)
              echo "Matched label: Docker-all"
              echo "Building All Docker Images."
              echo "Pushing Up All Docker Images."
              DOCKER_IMAGES+=("Dockerfile1" "Dockerfile2" "Dockerfile3") # Add all your app names here
              ;;
            *Docker-lambda*)
              echo "Matched label: Docker-lambda"
              echo "Building Lambda Docker Images."
              echo "Pushing Up Lambda Docker Images."
              DOCKER_IMAGES+=("Dockerfile4")
              ;;
            *Docker-ecs*)
              echo "Matched label: Docker-ecs"
              echo "Building ECS Docker Images."
              echo "Pushing Up ECS Docker Images."
              DOCKER_IMAGES+=("Dockerfile5")
              ;;
            *)
              echo "No matching labels found. Skipping Docker builds."
              ;;
          esac

          # Convert the array to a JSON array string
          DOCKER_IMAGES_JSON=$(printf '%s\n' "${DOCKER_IMAGES[@]}" | jq -R . | jq -cs .)
          # Check if DOCKER_IMAGES array is empty
          if [ ${#DOCKER_IMAGES[@]} -eq 0 ]; then
            echo "No Docker images to build."
            echo "should_proceed=false" >> $GITHUB_OUTPUT
          else
            echo "Docker images to build: ${DOCKER_IMAGES[@]}"
            echo "should_proceed=true" >> $GITHUB_OUTPUT
            # Set the Docker images as an output
            echo "docker_images=$DOCKER_IMAGES_JSON" >> $GITHUB_OUTPUT 
          fi         

      - name: Print GitHub Event Context
        env:
          GITHUB_EVENT: ${{ toJSON(github.event) }}
        run: |
          echo "$GITHUB_EVENT"

      - name: Terraform Apply
        if: github.event.pull_request.merged == true && 
        run: terraform apply -auto-approve -input=false

      # - name: Build Docker Container
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     push: false
      #     tags: your_dockerhub_username/your_repository_name:latest

  build:
    needs: Retrieve-Build-Options
    if: ${{ needs.Retrieve-Build-Options.outputs.should_proceed == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.Retrieve-Build-Options.outputs.docker_images) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.${{ matrix.image }}
          push: false
          tags: temp/${{ matrix.image }}:latest